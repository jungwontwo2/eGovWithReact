### 게시글 전체 목록 조회 (처음에는 비어있어야 정상)
GET http://localhost:8082/api/boards
Accept: application/json

### 게시글 1개 등록
POST http://localhost:8082/api/boards
Content-Type: application/json

{
  "title": "새로운 게시글 제목",
  "content": "인텔리제이에서 테스트 중입니다.",
  "writer": "테스터"
}

### 다시 전체 목록 조회 (방금 등록한 글이 보여야 함)
GET http://localhost:8082/api/boards
Accept: application/json

### 게시글 1건 상세 조회
GET http://localhost:8082/api/boards/1
Accept: application/json

### 게시글 1건 수정
PUT http://localhost:8082/api/boards/1
Content-Type: application/json

{
  "title": "수정된 제목입니다",
  "content": "내용도 수정되었습니다."
}

### 게시글 1건 삭제
DELETE http://localhost:8082/api/boards/1

### 1. 기본 페이지 조회 (파라미터 없음)
# pageIndex=1, pageUnit=10 (기본값) 으로 동작해야 함
# 예상 결과: list에 10개 (13번~4번 게시글), pagination의 totalCount는 12
GET http://localhost:8082/api/boards
Accept: application/json

### 2. 2페이지 조회 (기본 페이지 크기)
# pageIndex=2, pageUnit=10 으로 동작해야 함
# 예상 결과: list에 나머지 2개 (3번, 2번 게시글)
GET http://localhost:8082/api/boards?pageIndex=2
Accept: application/json

### 3. 페이지당 5개씩 보기 (1페이지)
# pageIndex=1, pageUnit=5 로 동작해야 함
# 예상 결과: list에 5개 (13번~9번 게시글)
GET http://localhost:8082/api/boards?pageUnit=5
Accept: application/json

### 4. 페이지당 5개씩 보기 (3페이지)
# pageIndex=3, pageUnit=5 로 동작해야 함
# 예상 결과: list에 마지막 2개 (3번, 2번 게시글)
GET http://localhost:8082/api/boards?pageIndex=3&pageUnit=5
Accept: application/json

### 1. '제목 1' 이라는 키워드로 검색
# 예상 결과: list에 "제목 1", "제목 10", "제목 11", "제목 12"가 포함된 4개의 게시글이 검색됨
GET http://localhost:8082/api/boards?searchKeyword=제목 1
Accept: application/json


### 2. '내용' 이라는 키워드로 검색하고, 2페이지 보기 (페이지당 5개)
# 예상 결과: list에 5개 (7번~3번 게시글), pagination의 totalCount는 12
GET http://localhost:8082/api/boards?searchKeyword=내용&pageUnit=5&pageIndex=2
Accept: application/json


### 3. 검색 결과가 없는 경우
# 예상 결과: list는 [], pagination의 totalCount는 0
GET http://localhost:8082/api/boards?searchKeyword=결과없음
Accept: application/json

### 로그인 테스트 (성공 시 JWT 토큰이 발급되어야 함)
POST http://localhost:8082/api/auth/login
Content-Type: application/json

{
  "memberId": "admin",
  "password": "1234"
}

### 1. 로그인하여 토큰 발급받기 및 변수에 저장
# @name loginRequest
POST http://localhost:8082/api/auth/login
Content-Type: application/json

{
  "memberId": "admin",
  "password": "1234"
}

> {%
    client.log("### 전체 응답 (Full Response Body) ###");
    client.log(JSON.stringify(response.body, null, 2));

    // 2. 응답에서 토큰을 추출하여 전역 변수에 저장합니다.
    client.global.set("jwt_token", response.body.token);

    // 3. 변수에 저장된 토큰 값을 다시 로그로 출력하여 잘 저장되었는지 확인합니다.
    client.log("### 저장된 토큰 값 (Saved JWT Token) ###");
    client.log(client.global.get("jwt_token"));
%}


### 2. 토큰 없이 게시글 생성 시도 (실패 예상)
# 예상 결과: 401 Unauthorized 또는 403 Forbidden 오류 발생
POST http://localhost:8082/api/boards
Content-Type: application/json

{
  "title": "토큰 없이 작성한 글",
  "content": "이 요청은 실패해야 합니다.",
  "writer": "Hacker"
}


### 3. 발급받은 토큰으로 게시글 생성 (성공 예상)
# Authorization 헤더에 1단계에서 저장한 {{jwt_token}} 변수를 사용합니다.
# 예상 결과: 200 OK
POST http://localhost:8082/api/boards
Content-Type: application/json
Authorization: Bearer {{jwt_token}}

{
  "title": "토큰으로 작성한 글",
  "content": "이 요청은 성공해야 합니다.",
  "writer": "admin"
}

### 4. 토큰 없이 게시글 목록 조회 (성공 예상)
# GET 요청은 permitAll()로 설정했으므로 토큰 없이도 성공해야 함
# 예상 결과: 200 OK
GET http://localhost:8082/api/boards
Accept: application/json